
REF_GENOME="DATA/TaeGut/bTaeGut1.pri.final.fasta"

rule bbmap:
    input:
        sam = REF_GENOME
    output:
        sim1="illumina_results/bbmap/sim1.fastq"
        sim2="illumina_results/bbmap/sim2.fastq"
    shell: """
        /bbmap/randomreads.sh -Xmx50g \
        ref= {input.ref} \
        out1={output.sim1} \
        out2={output.sim2} \
        coverage=100 addpairnum=t minlength=125 maxlength=175 paired=t mininsert=490 maxinsert=520
    """

# fastqc / conda
# trim: trimmomatic: / conda
# Adapter trimming, Sliding window trimming, Trailing bases quality trimming, 
# Leading bases quality trimming, Minimum read length, 
# spades /conda
# megahit / conda
# soap denovo2 / conda
# MIRA / conda
# ALLPATHS LG /conda
# Velvet / conda
# abyss conda

# after assembly:
# QUAST / conda 
# Mauve, InGAP-SV, 
# https://anaconda.org/bioconda/gapfiller
# 

rule megahit:
    input:
        sim1="illumina_results/bbmap/sim1.fastq"
        sim2="illumina_results/bbmap/sim2.fastq"
    output:
        "./megahit_sim_assembly"
    threads:
        workflow.cores
    conda:
        "envs/megahit.yml"
    shell: """
        megahit \
        -1 {input.sim1} \
        -2 {input.sim2} \
        -o {output} \
        -t {threads}
"""

#####

rule spades:
    input:
        sim1="illumina_results/bbmap/sim1.fastq"
        sim2="illumina_results/bbmap/sim2.fastq"
    output:
        "./megahit_sim_assembly"
    threads:
        workflow.cores
    conda:
        "envs/spades.yml"
    shell: """
        megahit \
        -1 {input.sim1} \
        -2 {input.sim2} \
        -o {output} \
        -t {threads}
"""


rule soapdenovo2:
    input:
        sim1="illumina_results/bbmap/sim1.fastq"
        sim2="illumina_results/bbmap/sim2.fastq"
    output:
        "./megahit_sim_assembly"
    threads:
        workflow.cores
    conda:
        "envs/soapdenovo.yml"
    shell: """
        megahit \
        -1 {input.sim1} \
        -2 {input.sim2} \
        -o {output} \
        -t {threads}
"""

rule allpathslg:
    input:
        sim1="illumina_results/bbmap/sim1.fastq"
        sim2="illumina_results/bbmap/sim2.fastq"
    output:
        "./megahit_sim_assembly"
    threads:
        workflow.cores
    conda:
        "envs/allpaths.yml"
    shell: """
        megahit \
        -1 {input.sim1} \
        -2 {input.sim2} \
        -o {output} \
        -t {threads}
"""

fastqc
trimmomatic
